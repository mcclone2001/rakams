version: '3'
networks:
    kafka-net:
        driver: bridge

services:
    db:
        image: "postgres:9.5"
        ports:
            - "5432:5432"
        volumes:
            - ./pgdata:/var/lib/postgresql/data
        environment:
            - POSTGRES_PASSWORD=password
    zookeeper:
        image: 'bitnami/zookeeper:latest'
        networks:
            - kafka-net
        ports:
            - '2181:2181'
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
    kafka:
        image: 'bitnami/kafka:latest'
        networks:
            - kafka-net
        ports:
            - '9092:9092'
            - '9093:9093'
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - ALLOW_PLAINTEXT_LISTENER=yes
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
            - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
            - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
            - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
        depends_on:
            - zookeeper
    statsd:
        image: "graphiteapp/graphite-statsd"
        ports:
            - "80:80"
            - "2003-2004:2003-2004"
            - "2023-2024:2023-2024"
            - "8125:8125/udp"
            - "8126:8126"
    redis:
        image: "redis"
        ports:
            - "6379:6379"
    app:
        build: .
        networks:
            - kafka-net
        ports:
            - "5000:5000"
        environment:
            - KAFKA_SEED_BROKERS=kafka://kafka:9092
            - KAFKA_CLIENT_ID=example_app

    apm-server:
        image: docker.elastic.co/apm/apm-server:7.9.2
        depends_on:
            elasticsearch:
                condition: service_healthy
            kibana:
                condition: service_healthy
        cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
        cap_drop: ["ALL"]
        ports:
            - 8200:8200
        networks:
            - kafka-net
        command: >
            apm-server -e
                -E apm-server.rum.enabled=true
                -E setup.kibana.host=kibana:5601
                -E setup.template.settings.index.number_of_replicas=0
                -E apm-server.kibana.enabled=true
                -E apm-server.kibana.host=kibana:5601
                -E output.elasticsearch.hosts=["elasticsearch:9200"]
        healthcheck:
            interval: 10s
            retries: 12
            test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
        environment:
            - bootstrap.memory_lock=true
            - cluster.name=docker-cluster
            - cluster.routing.allocation.disk.threshold_enabled=false
            - discovery.type=single-node
            - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
        ulimits:
            memlock:
                hard: -1
                soft: -1
        volumes:
            - esdata:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        networks:
            - kafka-net
        healthcheck:
            interval: 20s
            retries: 10
            test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

    logstash:
        build:
            context: docker-compose/logstash/
        volumes:
            - ./docker-compose/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
            - ./docker-compose/logstash/pipeline:/usr/share/logstash/pipeline:ro
        ports:
            - "5044:5044"
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        networks:
            - kafka-net
        depends_on:
            - elasticsearch

    kibana:
        image: docker.elastic.co/kibana/kibana:7.9.2
        depends_on:
            elasticsearch:
                condition: service_healthy
        environment:
            ELASTICSEARCH_URL: http://elasticsearch:9200
            ELASTICSEARCH_HOSTS: http://elasticsearch:9200
        ports:
            - 5601:5601
        networks:
            - kafka-net
        healthcheck:
            interval: 10s
            retries: 20
            test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

    nginx:
        image: "nginx"
        volumes:
            - ./docker-compose/nginx/nginx.config:/etc/nginx/nginx.conf:ro
        ports:
            - 81:81
        networks:
            - kafka-net

volumes:
    esdata:
        driver: local